@page "/game"

@using GameLibrary.GameModels
@using GameLibrary.Logic.GameInitializer

@inject CreateNewPlayers _createNewPlayers
@inject CreateMap _createMap

<h3>Game</h3>

@if (players is null || map is null)
{
    <p>Loading...</p>
}
else
{
    <div class="camera" id="camera" @onkeydown="@KeyDown">
        <div class="map pixelArt" id="map" width="500" height="500" style="@map.CssStyle()">

            @foreach (var player in players)
            {
            <div class="character @player.ID" id="character" facing="@player.Facing" walking="@player.Walking" style="transform: translate3d(@player.X_withPixelUnit, @player.Y_withPixelUnit, 0px);">
                <img class="characterShadow pixelArt" src="/images/DemoRpgCharacterShadow.png" alt="Shadow" />
                <img class="characterSpritesheet pixelArt" src="@player.ImgSrc" alt="Character" />
            </div>
            }
        </div>
    </div>

}


@code {
    private int pixelSize = 1;
    private List<Player> players = new List<Player>();
    private Map map;

    protected override async Task OnInitializedAsync()
    {
        players = await _createNewPlayers.Execute("Game Creator", pixelSize);

        var mapIDOfTheMainPlayer = players.Single(x => x.ID == "Game Creator").MapID; //first is MainCharacter
        map = await _createMap.Execute(mapIDOfTheMainPlayer);
    }


    //todo
    protected void KeyDown(KeyboardEventArgs e)
    {
        //Issue: KeyDown only is fired when input has focus.
        //System.Console.WriteLine( $"Presset: [{e.Key}]"  );
        switch (e.Key)
        {
            case " ":
                players.FirstOrDefault().X++;
                break;
        }
    }
}
