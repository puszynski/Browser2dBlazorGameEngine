@page "/game"

@using GameLibrary.GameModels
@using GameLibrary.Logic.GameInitializer

@inject IJSRuntime _jsRuntime;
@inject CreateNewPlayers _createNewPlayers;
@inject CreateMap _createMap;

<h3>Game</h3>

@if (players is null || map is null)
{
    <p>Loading...</p>
}
else
{
    <div class="camera" 
         id="camera" 
         style="width: @(_cameraWidth)px;
                height: @(_cameraHegiht)px;
                overflow: hidden;
                background: yellow;
                position: relative;">

        <div class="map pixelArt" 
             id="map" 
             width="@map.Width" 
             height="@map.Height" 
             style="@map.CssStyle()">

            @foreach (var player in players.OrderBy(x => x.Y))
            {
                <div class="character @player.ID" 
                     id="character" 
                     facing="@player.Facing" 
                     walking="@player.Walking.ToString()" 
                     style="transform:translate3d(@player.X_toDisplayPx,@player.Y_toDisplayPx, 0px);">

                    <img class="characterShadow pixelArt" 
                         src="/images/DemoRpgCharacterShadow.png" 
                         alt="Shadow" />
                    <img class="characterSpritesheet pixelArt" 
                         src="@player.ImgSrc" 
                         alt="Character" />
                </div>                
            }
        </div>
    </div>


    <div>
        @foreach (var player in players)
        {
            <p>@player.ID: position(@player.X, @player.Y)</p>            
            <br />
        }
    </div>
}


@code {
    int _pixelSize = 1;
    int _cameraWidth = 800;
    int _cameraHegiht = 600;


    List<Player> players = new List<Player>();
    Map map;
    Camera camera;


    //GAME START HERE
    protected override async Task OnInitializedAsync()
    {

        players = await _createNewPlayers.Execute("Game Creator", _pixelSize);
        var mainPlayer = players.Single(x => x.ID == "Game Creator");
        camera = new Camera(_cameraWidth, _cameraHegiht, mainPlayer);
        map = await _createMap.Execute(mainPlayer.MapID, camera);

        await _jsRuntime.InvokeAsync<object>("initializeFromCSharp", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public async ValueTask UpdatePixelSize(int pixelSize)
    {
        if (_pixelSize != pixelSize)
        {
            GlobalGameData.PixelSize = pixelSize;
            _pixelSize = pixelSize;
        }

    }

    [JSInvokable]
    public async ValueTask CSharpGameLoop(float timeStamp)
    {
        foreach (var player in players)
        {
            player.MoveAndSetDirectionInGameLoop(map.TilesMatrix);
        }
        camera.UpdateCameraPositionInGameLoop();

        this.StateHasChanged(); //refresh blazor data
    }

    [JSInvokable]
    public async ValueTask CSharpOnKeyDown(int key)
    {

        var mainPlayer = players.Single(x => x.ID == "Game Creator");

        if (!mainPlayer.HeldKeysDirestions.Contains(key))
            mainPlayer.HeldKeysDirestions.Add(key);
    }

    [JSInvokable]
    public async ValueTask CSharpOnKeyUp(int key)
    {
        var mainPlayer = players.Single(x => x.ID == "Game Creator");

        if (mainPlayer.HeldKeysDirestions.Contains(key))
            mainPlayer.HeldKeysDirestions.Remove(key);
    }
}
