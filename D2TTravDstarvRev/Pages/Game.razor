@page "/game"
@using Microsoft.AspNetCore.SignalR.Client;
@using GameLibrary.GameModels
@using GameLibrary.Logic.GameInitializer
@inject IJSRuntime _jsRuntime;
@inject NavigationManager navigationManager
@inject CreateNewPlayers _createNewPlayers;
@inject CreateNewPlayer _createNewPlayer;
@inject CreateMap _createMap;


@if (!_isGameOn)
{
    <p>
        Enter your character name:
    </p>

    <input type="text" maxlength="32" @bind="@_mainPlayerID" />
    <button type="button" @onclick="@InitializeGame"><span class="oi oi-chat" aria-hidden="true"></span> Play!</button>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    <div class="camera"
         id="camera"
         style="width: @(_cameraWidth)px;
                height: @(_cameraHegiht)px;
                overflow: hidden;
                background: yellow;
                position: relative;">

        <div class="map pixelArt"
             id="map"
             width="@map.Width"
             height="@map.Height"
             style="@map.CssStyle()">

            @foreach (var player in players.OrderBy(x => x.Y))
            {
                <div class="character @player.ID"
                     id="character"
                     facing="@player.Facing"
                     walking="@player.Walking.ToString()"
                     style="transform:translate3d(@player.X_toDisplayPx,@player.Y_toDisplayPx, 0px);">

                    <img class="characterShadow pixelArt"
                         src="/images/DemoRpgCharacterShadow.png"
                         alt="Shadow" />
                    <img class="characterSpritesheet pixelArt"
                         src="@player.ImgSrc"
                         alt="Character" />
                </div>
            }
        </div>
    </div>


    <div>
        @foreach (var player in players)
        {
            <p>@player.ID: position(@player.X, @player.Y)</p>
        }
    </div>
}


@*@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}*@


@code {
    bool _isGameOn = false;
    string _mainPlayerID;

    string _errorMessage;

    int _pixelSize = 1;
    int _cameraWidth = 800;
    int _cameraHegiht = 600;


    List<Player> players = new List<Player>();
    Map map;
    Camera camera;




    //GAME START HERE - TODO NOT HERE
    protected override async Task OnInitializedAsync()
    {
        //players = await _createNewPlayers.Execute("Game Creator");
        //var mainPlayer = players.Single(x => x.ID == "Game Creator");
        //camera = new Camera(_cameraWidth, _cameraHegiht, mainPlayer);
        //map = await _createMap.Execute(mainPlayer.MapID, camera);

        //await _jsRuntime.InvokeAsync<object>("initializeFromCSharp", DotNetObjectReference.Create(this));
        //await base.OnInitializedAsync();
    }

    private async Task InitializeGame()
    {
        if (string.IsNullOrWhiteSpace(_mainPlayerID))
        {
            _errorMessage = "Please enter a character name";
            return;
        };

        try
        {
            var newPlayer = await _createNewPlayer.Execute(_mainPlayerID);
            players.Add(newPlayer);

            var mainPlayer = players.Single(x => x.ID == _mainPlayerID);
            camera = new Camera(_cameraWidth, _cameraHegiht, mainPlayer);
            map = await _createMap.Execute(mainPlayer.MapID, camera);

            _isGameOn = true;

            await _jsRuntime.InvokeAsync<object>("initializeFromCSharp", DotNetObjectReference.Create(this));
            await base.OnInitializedAsync();


            //TODO - send to other players: <= ale to chyba przesylasz w game loop

            // Create the client
            var baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + GameHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastPlayerMessage);

            await _hubConnection.StartAsync();

            await SendPlayerDataAsync();
        }
        catch (Exception e)
        {
            _errorMessage = $"ERROR: Failed to start game: {e.Message}";
            _mainPlayerID = null;
        }
    }

    private void BroadcastPlayerMessage(string playerID, string playerObjectJSON)
    {
        var incomingPlayerData = System.Text.Json.JsonSerializer.Deserialize<Player>(playerObjectJSON);

        bool isMine = playerID.Equals(_mainPlayerID, StringComparison.OrdinalIgnoreCase);

        if (isMine)
            return;

        if (players.Any(x => x.ID == playerID))
            players.Remove(players.Single(x => x.ID == playerID));

        players.Add(incomingPlayerData);
        StateHasChanged();
    }

    private async Task SendPlayerDataAsync()
    {
        if (_isGameOn && players.Any(x => x.ID == _mainPlayerID))
        {
            var sendingPlayerData = System.Text.Json.JsonSerializer.Serialize<Player>(players.Single(x => x.ID == _mainPlayerID));
            await _hubConnection.SendAsync("Broadcast", _mainPlayerID, sendingPlayerData);
        }
    }


    [JSInvokable]
    public async ValueTask UpdatePixelSize(int pixelSize)
    {
        if (_pixelSize != pixelSize)
        {
            GlobalGameData.PixelSize = pixelSize;
            _pixelSize = pixelSize;
        }

    }

    [JSInvokable]
    public async ValueTask CSharpGameLoop(float timeStamp)
    {
        foreach (var player in players)
        {
            player.MoveAndSetDirectionInGameLoop(map.TilesMatrix);
        }
        camera.UpdateCameraPositionInGameLoop();

        StateHasChanged(); //refresh blazor data
    }

    [JSInvokable]
    public async ValueTask CSharpOnKeyDown(int key)
    {

        var mainPlayer = players.Single(x => x.ID == _mainPlayerID);

        if (!mainPlayer.HeldKeysDirestions.Contains(key))
            mainPlayer.HeldKeysDirestions.Add(key);

        await SendPlayerDataAsync();
    }

    [JSInvokable]
    public async ValueTask CSharpOnKeyUp(int key)
    {
        var mainPlayer = players.Single(x => x.ID == _mainPlayerID);

        if (mainPlayer.HeldKeysDirestions.Contains(key))
            mainPlayer.HeldKeysDirestions.Remove(key);

        await SendPlayerDataAsync();
    }

    #region CHAT SIGNAL-R
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + GameHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("BroadcastChatMsg", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("BroadcastChatMsg", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
    #endregion CHAT SIGNAL-R
}
